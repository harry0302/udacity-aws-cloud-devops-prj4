name: Frontend Continuous Deployment

on:
  push:
    branches:
      - main

  workflow_dispatch:

defaults:
  run:
    working-directory: ./starter/frontend

jobs:
  lint:
    name: 'Lint'
    if: (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.14
          cache: 'npm'
          cache-dependency-path: ./starter/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  test:
    name: "Test"
    if: (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.14
          cache: 'npm'
          cache-dependency-path: ./starter/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: CI=true npm test

  build:
    name: "Build"
    needs: [lint, test]
    if: success() && ((github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch')

    runs-on: ubuntu-latest

    env:
        IMAGE_NAME: 'movie-catalog'
        EKS_CLUSTER_NAME: 'cluster'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.14
          cache: 'npm'
          cache-dependency-path: ./starter/frontend/package-lock.json
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BACKEND_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
          ECR_REPOSITORY: frontend

        run: | 
          docker build --build-arg=REACT_APP_MOVIE_API_URL=$BACKEND_URL -t $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}

      - name: Configure kubectl
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          mkdir -p ~/.kube
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend
        run: |
          cd ./k8s/
          kustomize edit set image frontend=$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}
          kustomize build | kubectl apply -f - --validate=false
